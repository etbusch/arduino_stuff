
const int CE = 5;
const int WE = 3;
const int OE = 4;
const int stdDelay = 1;

const int CHIP_ERASE_ADD_SEQUENCE[6] = {0x5555, 0x2AAA, 0x5555, 0x5555, 0x2AAA, 0x5555}; 
const int CHIP_ERASE_DAT_SEQUENCE[6] = {0xAA, 0x55, 0x80, 0xAA, 0x55, 0x10};

const int BYTE_PROGRAM_ADD_SEQUENCE[3] = {0x5555, 0x2AAA, 0x5555};
const int BYTE_PROGRAM_DAT_SEQUENCE[3] = {0xAA, 0x55, 0xA0};

const int DEVICE_ID_ADD_SEQUENCE[3] = {0x5555, 0x2AAA, 0x5555};
const int DEVICE_ID_DAT_SEQUENCE[3] = {0xAA, 0x55, 0x90};

const int DEVICE_EXIT_ADD_SEQUENCE[3] = {0x5555, 0x2AAA, 0x5555};
const int DEVICE_EXIT_DAT_SEQUENCE[3] = {0xAA, 0x55, 0xF0};

const unsigned long START_ADD = 0xE000;
const int FLASH_SIZE = 1024;
const uint8_t ROM[1024] = {
0xFE, 0xA0, 0x00, 0x6E, 0x00, 0x8D, 0x40, 0x6E, 0x00, 0x10, 0x16, 0x04, 0xBD, 0xE3, 0x34, 0x8D,
0x67, 0x81, 0x53, 0x26, 0xFA, 0x8D, 0x61, 0x81, 0x39, 0x27, 0x29, 0x81, 0x31, 0x26, 0xF0, 0x7F,
0xA0, 0x0F, 0x8D, 0x31, 0x80, 0x02, 0xB7, 0xA0, 0x47, 0x8D, 0x1C, 0x8D, 0x28, 0x7A, 0xA0, 0x47,
0x27, 0x09, 0xA7, 0x00, 0xA1, 0x00, 0x26, 0x08, 0x08, 0x20, 0xF0, 0x7C, 0xA0, 0x0F, 0x27, 0xCF,
0x86, 0x3F, 0x8D, 0x31, 0x7E, 0xE2, 0xD4, 0x8D, 0x0C, 0xB7, 0xA0, 0x0D, 0x8D, 0x07, 0xB7, 0xA0,
0x0E, 0xFE, 0xA0, 0x0D, 0x39, 0x8D, 0x53, 0x48, 0x48, 0x48, 0x48, 0x16, 0x8D, 0x4C, 0x1B, 0x16,
0xFB, 0xA0, 0x0F, 0xF7, 0xA0, 0x0F, 0x39, 0x44, 0x44, 0x44, 0x44, 0x84, 0x0F, 0x8B, 0x30, 0x81,
0x39, 0x23, 0x02, 0x8B, 0x07, 0x7E, 0xE1, 0xD1, 0x7E, 0xE1, 0xAC, 0x8D, 0xF8, 0x08, 0xA6, 0x00,
0x81, 0x04, 0x26, 0xF7, 0x39, 0x7E, 0xE1, 0x4A, 0x8D, 0xBD, 0xCE, 0xE1, 0x9D, 0x8D, 0xEF, 0xCE,
0xA0, 0x0D, 0x8D, 0x34, 0xFE, 0xA0, 0x0D, 0x8D, 0x31, 0x8D, 0x31, 0x8D, 0xDB, 0x81, 0x20, 0x27,
0xFA, 0x81, 0x0D, 0x27, 0xE0, 0x81, 0x5E, 0x20, 0x2C, 0x01, 0x8D, 0xCC, 0x80, 0x30, 0x2B, 0x4C,
0x81, 0x09, 0x2F, 0x0A, 0x81, 0x11, 0x2B, 0x44, 0x81, 0x16, 0x2E, 0x40, 0x80, 0x07, 0x39, 0xA6,
0x00, 0x8D, 0xA4, 0xA6, 0x00, 0x08, 0x20, 0xA3, 0x8D, 0xF5, 0x8D, 0xF3, 0x86, 0x20, 0x20, 0xA5,
0x8E, 0xA0, 0x42, 0x20, 0x2C, 0x26, 0x07, 0x09, 0x09, 0xFF, 0xA0, 0x0D, 0x20, 0xAC, 0xFF, 0xA0,
0x0D, 0x20, 0x02, 0x20, 0x6D, 0x81, 0x30, 0x25, 0xA1, 0x81, 0x46, 0x22, 0x9D, 0x8D, 0xBD, 0xBD,
0xE0, 0x57, 0x09, 0xA7, 0x00, 0xA1, 0x00, 0x27, 0x91, 0x7E, 0xE0, 0x40, 0xBE, 0xA0, 0x08, 0x20,
0x49, 0xBF, 0xA0, 0x08, 0x86, 0xFF, 0xBD, 0xE3, 0x08, 0xCE, 0x80, 0x04, 0xBD, 0xE2, 0x84, 0xA6,
0x00, 0xA1, 0x02, 0x20, 0x02, 0x20, 0x19, 0x26, 0x39, 0x86, 0x03, 0xA7, 0x00, 0x86, 0x11, 0xA7,
0x00, 0x20, 0x2F, 0x01, 0xBF, 0xA0, 0x08, 0x30, 0x6D, 0x06, 0x26, 0x02, 0x6A, 0x05, 0x6A, 0x06,
0xCE, 0xE1, 0x9D, 0xBD, 0xE0, 0x7E, 0xFE, 0xA0, 0x08, 0x08, 0x8D, 0x8E, 0x8D, 0x8C, 0x8D, 0x8A,
0x8D, 0x86, 0x8D, 0x84, 0xCE, 0xA0, 0x08, 0xBD, 0xE0, 0xC8, 0xFE, 0xA0, 0x12, 0x8C, 0xE1, 0x23,
0x27, 0x19, 0x8E, 0xA0, 0x42, 0xCE, 0x80, 0x04, 0xFF, 0xA0, 0x0A, 0x7F, 0xA0, 0x0C, 0x8D, 0x73,
0x27, 0x03, 0xBD, 0xE2, 0x7D, 0xBD, 0xE3, 0x53, 0xBD, 0xE3, 0x47, 0xCE, 0xE1, 0x9C, 0xBD, 0xE0,
0x7E, 0x8D, 0x39, 0xCE, 0xE3, 0xD1, 0xA1, 0x00, 0x26, 0x07, 0xBD, 0xE0, 0xCC, 0xEE, 0x01, 0x6E,
0x00, 0x08, 0x08, 0x08, 0x8C, 0xE3, 0xF8, 0x26, 0xED, 0x20, 0xBF, 0xFE, 0xA0, 0x12, 0x6E, 0x00,
0x53, 0x39, 0x04, 0x0D, 0x0A, 0x15, 0x00, 0x00, 0x00, 0x53, 0x31, 0x04, 0x13, 0x0D, 0x0A, 0x15,
0x00, 0x00, 0x00, 0x24, 0x04, 0x20, 0x4C, 0xFE, 0xA0, 0x06, 0x6E, 0x00, 0x20, 0x40, 0xBD, 0xE0,
0x47, 0xFF, 0xA0, 0x04, 0xBD, 0xE0, 0x47, 0xBD, 0xE0, 0x55, 0x16, 0xA6, 0x00, 0xFF, 0xA0, 0x0D,
0x11, 0x27, 0x02, 0x20, 0x21, 0xCE, 0xE1, 0x9D, 0xBD, 0xE0, 0x7E, 0xCE, 0xA0, 0x0D, 0x20, 0x10,
0x3B, 0x20, 0x3A, 0xFF, 0xA0, 0x10, 0xFE, 0xA0, 0x0A, 0x37, 0xE6, 0x01, 0xE1, 0x03, 0x33, 0x39,
0xBD, 0xE0, 0xC8, 0xFE, 0xA0, 0x0D, 0xBC, 0xA0, 0x04, 0x27, 0x9E, 0x08, 0x20, 0xCD, 0x8D, 0x06,
0x84, 0x7F, 0x39, 0x31, 0x31, 0x31, 0x37, 0x8D, 0xDA, 0x26, 0x28, 0x86, 0x15, 0xA7, 0x00, 0xA6,
0x00, 0x47, 0x24, 0xFB, 0xA6, 0x01, 0xF6, 0xA0, 0x0C, 0x27, 0x07, 0x20, 0x11, 0x37, 0x8D, 0xC3,
0x26, 0x2E, 0xC6, 0x11, 0xE7, 0x00, 0xE6, 0x00, 0x57, 0x57, 0x24, 0xFA, 0xA7, 0x01, 0x33, 0xFE,
0xA0, 0x10, 0x39, 0xA6, 0x00, 0x2B, 0xFC, 0x8D, 0x3A, 0xC6, 0x04, 0xE7, 0x02, 0x58, 0x8D, 0x2A,
0x0D, 0x69, 0x00, 0x46, 0x5A, 0x26, 0xF7, 0x8D, 0x21, 0xF6, 0xA0, 0x0C, 0x27, 0x13, 0x20, 0xDE,
0x8D, 0x23, 0xC6, 0x0A, 0x6A, 0x00, 0x8D, 0x16, 0x8D, 0x10, 0xA7, 0x00, 0x0D, 0x46, 0x5A, 0x26,
0xF7, 0xE6, 0x02, 0x58, 0x2A, 0xC8, 0x8D, 0x02, 0x20, 0xC4, 0x6D, 0x02, 0x2A, 0xFC, 0x6C, 0x02,
0x6A, 0x02, 0x39, 0x6F, 0x02, 0x8D, 0xF7, 0x20, 0xF1, 0x8D, 0x83, 0x16, 0x7F, 0xA0, 0x0B, 0xFE,
0xA0, 0x0A, 0x8D, 0x10, 0x8D, 0x07, 0xCE, 0xE3, 0xEF, 0x17, 0x7E, 0xE1, 0x76, 0x86, 0x34, 0xA7,
0x03, 0xA7, 0x02, 0x39, 0x6C, 0x00, 0x86, 0x07, 0xA7, 0x01, 0x6C, 0x00, 0xA7, 0x02, 0x39, 0x7F,
0x80, 0x14, 0x8D, 0x2E, 0xC6, 0x0B, 0x8D, 0x25, 0xE6, 0x04, 0xC5, 0x01, 0x26, 0xFA, 0x6F, 0x06,
0x8D, 0x1D, 0xC6, 0x9C, 0x8D, 0x17, 0xCE, 0x24, 0x00, 0xC5, 0x02, 0x27, 0x06, 0xB6, 0x80, 0x1B,
0xA7, 0x00, 0x08, 0xF6, 0x80, 0x18, 0xC5, 0x01, 0x26, 0xEF, 0x7E, 0x24, 0x00, 0xE7, 0x04, 0x8D,
0x00, 0x39, 0xCE, 0xFF, 0xFF, 0x09, 0x8C, 0x80, 0x14, 0x26, 0xFA, 0x39, 0xCE, 0xE0, 0x09, 0xBD,
0xE0, 0x7E, 0x8D, 0xF1, 0xBD, 0xE3, 0x47, 0x20, 0x58, 0xCE, 0xE1, 0x23, 0xBC, 0xA0, 0x12, 0x27,
0x1A, 0x08, 0x8D, 0x32, 0xBD, 0xE0, 0x47, 0xFF, 0xA0, 0x14, 0xA6, 0x00, 0xB7, 0xA0, 0x16, 0x86,
0x3F, 0xA7, 0x00, 0xCE, 0xE1, 0x23, 0x8D, 0x1E, 0x7E, 0xE1, 0x6B, 0xFE, 0xA0, 0x14, 0xB6, 0xA0,
0x16, 0xA7, 0x00, 0xCE, 0xE1, 0x24, 0x20, 0xDA, 0xB7, 0xA0, 0x43, 0xFE, 0xA0, 0x12, 0x8C, 0xE1,
0x23, 0x27, 0x06, 0xCE, 0xE1, 0x24, 0xFF, 0xA0, 0x12, 0x39, 0x8D, 0x5A, 0x20, 0x0F, 0xCE, 0xA0,
0x49, 0xFF, 0xA0, 0x04, 0x09, 0x8D, 0x52, 0xCE, 0xE1, 0x90, 0xBD, 0xE0, 0x7E, 0x8D, 0x24, 0x8D,
0x91, 0x7E, 0xE1, 0x52, 0x73, 0xA0, 0x0C, 0x86, 0x11, 0xC6, 0x20, 0x8D, 0x1A, 0xBD, 0xE1, 0xD9,
0x27, 0x04, 0x86, 0x3C, 0xA7, 0x03, 0x39, 0x86, 0x13, 0xC6, 0x10, 0x20, 0x0A, 0x86, 0x12, 0xC6,
0x04, 0x20, 0x04, 0x86, 0x14, 0xC6, 0x08, 0xBD, 0xE0, 0x75, 0xBD, 0xE1, 0xD6, 0x27, 0x16, 0x86,
0x02, 0xCA, 0x01, 0x8D, 0x0C, 0x8D, 0x08, 0x86, 0x02, 0xC6, 0x01, 0xE7, 0x00, 0x8D, 0x02, 0x86,
0x06, 0xA7, 0x01, 0xE7, 0x00, 0x39, 0xFE, 0xA0, 0x02, 0xFF, 0xA0, 0x44, 0x8D, 0xCF, 0xB6, 0xA0,
0x05, 0xB0, 0xA0, 0x45, 0xF6, 0xA0, 0x04, 0xF2, 0xA0, 0x44, 0x26, 0x04, 0x81, 0x10, 0x25, 0x02,
0x86, 0x0F, 0x8B, 0x04, 0xB7, 0xA0, 0x47, 0x80, 0x03, 0xB7, 0xA0, 0x46, 0xCE, 0xE1, 0x93, 0xBD,
0xE0, 0x7E, 0x5F, 0xCE, 0xA0, 0x47, 0x8D, 0x24, 0xCE, 0xA0, 0x44, 0x8D, 0x1F, 0x8D, 0x1D, 0xFE,
0xA0, 0x44, 0x8D, 0x18, 0x7A, 0xA0, 0x46, 0x26, 0xF9, 0xFF, 0xA0, 0x44, 0x53, 0x37, 0x30, 0x8D,
0x0B, 0x33, 0xFE, 0xA0, 0x44, 0x09, 0xBC, 0xA0, 0x04, 0x26, 0xB3, 0x39, 0xEB, 0x00, 0x7E, 0xE0,
0xBF, 0x47, 0xE1, 0xD0, 0x5A, 0xC0, 0x00, 0x4D, 0xE0, 0x88, 0x46, 0xE1, 0xAE, 0x52, 0xE1, 0x30,
0x4A, 0xE0, 0x05, 0x43, 0xE2, 0xCC, 0x44, 0xE2, 0x8F, 0x42, 0xE2, 0xD9, 0x4F, 0xE2, 0x69, 0x50,
0xE3, 0x1A, 0x4C, 0xE0, 0x0C, 0x45, 0xE3, 0x1E, 0xE0, 0x00, 0xE1, 0x8B, 0xE1, 0xA7, 0xE0, 0xD0};

uint8_t progmem_temp;


void setup() {
	

}

void loop() {
        DDRA=B11111111;
	DDRC=B11111111;
	DDRL=B00000000;

	pinMode(CE, OUTPUT);
	pinMode(WE, OUTPUT);
	pinMode(OE, OUTPUT);
	digitalWrite(CE, HIGH);
	digitalWrite(WE, HIGH);
	digitalWrite(OE, HIGH);

	Serial.begin(115200);
	PORTA=0;
	PORTC=0;

	delay(2000);
        readDeviceID();
        Serial.println("Erasing Chip");
        chipErase();
        delay(100);
        Serial.println("Erasing Chip Done");
        Serial.print("Programming ");
        Serial.print(FLASH_SIZE);
        Serial.print(" bytes starting at address ");
        Serial.println(START_ADD);
	for (unsigned int i = 0; i < FLASH_SIZE; i++)
	{
                progmem_temp = ROM[i];
		Serial.print("Writing byte: ");
                Serial.print(progmem_temp);
                Serial.print(" at address: ");
		Serial.print(START_ADD + i);
		Serial.print("\n");
		programByte((START_ADD + i) / 256, (START_ADD + i) % 256, progmem_temp);
	}
        PORTA=0;
	PORTC=0;
	for (unsigned int i = 0; i < FLASH_SIZE; i++)
	{  
                uint8_t msb = (START_ADD + i) / 256;
                uint8_t lsb = (START_ADD + i) % 256;
		Serial.print("Testing byte address: ");
		Serial.print(msb);
                Serial.print(" ");
                Serial.print(lsb);
		Serial.print(" with data: ");
                uint8_t result = read(msb, lsb);
		Serial.print(ROM[i]);
		Serial.print(" result: ");
		Serial.print(result);
		if (ROM[i] == result) {
                  Serial.print(" PASS\n");
                } else {
                  Serial.println(" FAIL");
                }
	}
        while(1){}
}

uint8_t read(uint8_t msb, uint8_t lsb) {
	DDRL=B00000000;
	uint8_t eepromtest;
	PORTC = msb;
	PORTA = lsb;
	digitalWrite(CE, LOW);
	digitalWrite(OE, LOW);
        delay(stdDelay);
	eepromtest = PINL;
        digitalWrite(OE,HIGH);
	digitalWrite(CE, HIGH);
	return eepromtest;
} 

void write(uint8_t msb, uint8_t lsb, uint8_t bytes) {
	PORTC = msb;
	PORTA = lsb;
	DDRL = B11111111;
	PORTL = bytes;
	delay(stdDelay);
	digitalWrite(OE, HIGH);
	digitalWrite(CE, LOW);
	digitalWrite(WE, LOW);
	delay(stdDelay);
	digitalWrite(WE, HIGH);
	digitalWrite(CE, HIGH);
	DDRL=B00000000;
}

void chipErase() {
  for (int i = 0; i < 6; i++) {
    write(CHIP_ERASE_ADD_SEQUENCE[i]/256,CHIP_ERASE_ADD_SEQUENCE[i]%256,CHIP_ERASE_DAT_SEQUENCE[i]);
  }
}

void programByte(uint8_t msb, uint8_t lsb, uint8_t bytes) {
  for (int i = 0; i < 3; i++) {
    write(BYTE_PROGRAM_ADD_SEQUENCE[i]/256,BYTE_PROGRAM_ADD_SEQUENCE[i]%256,BYTE_PROGRAM_DAT_SEQUENCE[i]);
  }
  write(msb,lsb,bytes);
}

void readDeviceID() {
  for (int i = 0; i < 3; i++) {
    write(DEVICE_ID_ADD_SEQUENCE[i]/256, DEVICE_ID_ADD_SEQUENCE[i]%256, DEVICE_ID_DAT_SEQUENCE[i]);
  }
  uint8_t manufacturer = read(0, 0);
  uint8_t id = read(0, 1);
  for (int i = 0; i < 3; i++) {
    write(DEVICE_EXIT_ADD_SEQUENCE[i]/256, DEVICE_EXIT_ADD_SEQUENCE[i]%256, DEVICE_EXIT_DAT_SEQUENCE[i]);
  }
  Serial.print("manufacturer: ");
  Serial.print(manufacturer);
  Serial.print(" id: ");
  Serial.println(id);
}
